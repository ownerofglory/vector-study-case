// Code generated by MockGen. DO NOT EDIT.
// Source: ./num_port.go

// Package port is a generated GoMock package.
package port

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNumService is a mock of NumService interface.
type MockNumService struct {
	ctrl     *gomock.Controller
	recorder *MockNumServiceMockRecorder
}

// MockNumServiceMockRecorder is the mock recorder for MockNumService.
type MockNumServiceMockRecorder struct {
	mock *MockNumService
}

// NewMockNumService creates a new mock instance.
func NewMockNumService(ctrl *gomock.Controller) *MockNumService {
	mock := &MockNumService{ctrl: ctrl}
	mock.recorder = &MockNumServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumService) EXPECT() *MockNumServiceMockRecorder {
	return m.recorder
}

// FindPairForTarget mocks base method.
func (m *MockNumService) FindPairForTarget(a, b []int, target int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPairForTarget", a, b, target)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FindPairForTarget indicates an expected call of FindPairForTarget.
func (mr *MockNumServiceMockRecorder) FindPairForTarget(a, b, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPairForTarget", reflect.TypeOf((*MockNumService)(nil).FindPairForTarget), a, b, target)
}
